openapi: 3.0.0
paths:
  /api/health:
    get:
      operationId: HealthController_run
      parameters: []
      responses:
        "200":
          description: ""
  /api/users:
    get:
      operationId: UserController_run
      parameters: []
      responses:
        "200":
          description: ""
  /api/llms/ai-friend-response:
    post:
      operationId: LlmsController_aiFriendResponse
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AiFriendResponseDto"
      responses:
        "201":
          description: ""
      security: &a1
        - bearer: []
      tags:
        - LLM
  /api/llms/message-router:
    post:
      operationId: LlmsController_messageRouter
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageRouterDto"
      responses:
        "201":
          description: ""
      security: *a1
      tags:
        - LLM
  /api/llms/generate-friend-summary:
    post:
      operationId: LlmsController_generateFriendSummary
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateFriendSummaryDto"
      responses:
        "201":
          description: ""
      security: *a1
      tags:
        - LLM
  /api/llms/clear-cache:
    post:
      operationId: LlmsController_clearCache
      parameters: []
      responses:
        "201":
          description: ""
      security: *a1
      tags:
        - Redis
  /api/llms/clear-completed-jobs:
    post:
      operationId: LlmsController_clearCompletedJobs
      parameters: []
      responses:
        "201":
          description: ""
      security: *a1
      tags:
        - Redis
  /api/llms/clear-all-jobs:
    post:
      operationId: LlmsController_clearAllJobs
      parameters: []
      responses:
        "201":
          description: ""
      security: *a1
      tags:
        - Redis
  /api/llms/queue-size:
    get:
      operationId: LlmsController_getQueueSize
      parameters: []
      responses:
        "200":
          description: ""
      security: *a1
      tags:
        - Redis
  /api/llms/handle-cache-full:
    post:
      operationId: LlmsController_handleCacheFull
      parameters: []
      responses:
        "201":
          description: ""
      security: *a1
      tags:
        - Redis
  /api/vector/add-documents:
    post:
      operationId: VectorController_addDocumentsToVectorStore
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddDocumentsToVectorStoreDto"
      responses:
        "201":
          description: ""
      tags: &a2
        - Vector
      security: &a3
        - bearer: []
  /api/vector/add-memory:
    post:
      operationId: VectorController_addMemoryToVectorStore
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMemoryToVectorStoreDto"
      responses:
        "201":
          description: ""
      tags: *a2
      security: *a3
  /api/vector/create-memory-summary:
    post:
      operationId: VectorController_createMemorySummary
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMemorySummaryDto"
      responses:
        "201":
          description: ""
      tags: *a2
      security: *a3
  /api/vector/vector-search:
    post:
      operationId: VectorController_vectorSearch
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VectorSearchDto"
      responses:
        "201":
          description: ""
      tags: *a2
      security: *a3
  /api/vector/memory-search:
    post:
      operationId: VectorController_memorySearch
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MemorySearchDto"
      responses:
        "201":
          description: ""
      tags: *a2
      security: *a3
info:
  title: ChitChat Microservice
  description: This is the ChitChat microservice which is responsible for the AI
    chat functionality.
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  schemas:
    ModeData:
      type: object
      properties:
        mode:
          type: string
          description: Mode of the model
          enum:
            - web
            - normal
          example: web
        webContent:
          type: string
          description: Web content
          example: This is a web page content about a cat
      required:
        - mode
        - webContent
    AiFriend:
      type: object
      properties:
        name:
          type: string
          description: Name of the AI friend
          example: John
        persona:
          type: string
          description: Persona of the AI friend
          example: A helpful assistant
        about:
          type: string
          description: About the AI friend
          example: I am a helpful assistant
        knowledge_base:
          type: string
          description: Knowledge base of the AI friend
          example: I know a lot of things
      required:
        - name
        - persona
        - about
        - knowledge_base
    User:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
          example: Jane
        persona:
          type: string
          description: Persona of the user
          example: A curious user
        about:
          type: string
          description: About the user
          example: I am a curious user
        knowledge_base:
          type: string
          description: Knowledge base of the user
          example: I know a lot of things
      required:
        - name
        - persona
        - about
        - knowledge_base
    DataObject:
      type: object
      properties:
        userId:
          type: string
          description: User ID
          example: "123"
        sessionId:
          type: string
          description: Session ID
          example: "123"
        aiFriendId:
          type: string
          description: AI friend ID
          example: "123"
        aiFriend:
          description: AI friend details
          allOf:
            - $ref: "#/components/schemas/AiFriend"
        user:
          description: User details
          allOf:
            - $ref: "#/components/schemas/User"
        friendsSummary:
          type: string
          description: Summary of the friendship
          example: A friendly AI and a human user
      required:
        - userId
        - sessionId
        - aiFriendId
        - aiFriend
        - user
        - friendsSummary
    AiFriendResponseDto:
      type: object
      properties:
        userPrompt:
          type: string
          description: User prompt
          example: let's discuss story
        modeData:
          description: Model data
          allOf:
            - $ref: "#/components/schemas/ModeData"
        dataObject:
          description: Data object
          allOf:
            - $ref: "#/components/schemas/DataObject"
        sessionType:
          type: string
          description: Session type
          enum:
            - StoryMode
            - General
            - ResearchMode
          example: StoryMode
        sessionDescription:
          type: string
          description: Session description
          example: A story about a cat
        lastConversation:
          description: Last conversation
          example:
            - Hello, how are you?
            - I am fine, thank you.
          type: array
          items:
            type: string
      required:
        - userPrompt
        - modeData
        - dataObject
        - sessionType
        - sessionDescription
        - lastConversation
    RouterData:
      type: object
      properties:
        user:
          description: User details
          allOf:
            - $ref: "#/components/schemas/User"
        activeFriends:
          description: List of active friends
          type: array
          items:
            $ref: "#/components/schemas/AiFriend"
        friendsSummary:
          type: string
          description: Summary of the friendship
          example: A friendly AI and a human user
      required:
        - user
        - activeFriends
        - friendsSummary
    MessageRouterDto:
      type: object
      properties:
        message:
          type: string
          description: Message content
          example: Hello, how are you?
        routerData:
          description: Router data containing user and active friends information
          allOf:
            - $ref: "#/components/schemas/RouterData"
      required:
        - message
        - routerData
    GenerateFriendSummaryDto:
      type: object
      properties:
        friendsData:
          type: object
          description: Friends data
          example:
            user:
              name: Jane
              persona: A friendly and curious software developer
              about: I love learning new technologies and discussing programming concepts
              knowledge_base: Software development, web technologies, AI/ML
            friends:
              - name: TechBot
                persona: An enthusiastic tech expert
                about: Specialized in explaining complex technical concepts in simple terms
                knowledge_base: Programming languages, system design, best practices
              - name: CreativeAI
                persona: An artistic and imaginative companion
                about: Loves brainstorming creative solutions and thinking outside the box
                knowledge_base: UI/UX design, creative writing, digital art
      required:
        - friendsData
    AddDocumentsToVectorStoreDto:
      type: object
      properties:
        message:
          type: string
          description: Message content to be added to the vector store
          example: This is a sample message that will be added to the vector store.
          minLength: 1
          maxLength: 1000
        messageId:
          type: string
          description: Unique identifier for the message
          example: msg123456
        conversationId:
          type: string
          description: Unique identifier for the conversation
          example: conv123456
        userId:
          type: string
          description: Unique identifier for the user
          example: user789012
      required:
        - message
        - messageId
        - conversationId
        - userId
    AddMemoryToVectorStoreDto:
      type: object
      properties:
        MomoryContext:
          type: string
          description: Message content to be added to the vector store
          example: This is a sample message that will be added to the vector store.
          minLength: 1
          maxLength: 1000
        messageId:
          type: string
          description: Unique identifier for the message
          example: msg123456
        friendId:
          type: string
          description: Unique Friend Id for the message
          example: friend123456
        conversationId:
          type: string
          description: Unique identifier for the conversation
          example: conv123456
        userId:
          type: string
          description: Unique identifier for the user
          example: user789012
      required:
        - MomoryContext
        - messageId
        - friendId
        - conversationId
        - userId
    CreateMemorySummaryDto:
      type: object
      properties:
        dataInfo:
          type: object
          description: Information about the AI friend and conversation context
          example:
            aiFriends:
              - aiFriendId: ai123456
                aiFriendName: Sophie
                aiFriendPersona: Friendly and empathetic AI assistant with a keen interest in
                  psychology
                aiFriendAbout: Enjoys helping people, discussing emotions, and understanding
                  human behavior
                aiFriendKnowledgeBase: Extensive knowledge of psychology, counseling techniques,
                  and interpersonal dynamics
        friendsSummary:
          type: string
          description: Summary of the friends
          example: John is a software engineer who likes technical discussions. Maria is
            an artist who shares creative ideas.
        userId:
          type: string
          description: Unique identifier for the user
          example: user789012
        conversationId:
          type: string
          description: Unique identifier for the conversation
          example: conv123456
        lastConversations:
          type: string
          description: Recent conversation history to generate memory from
          example: |-
            User: How was your day?
            Sophie: It was wonderful! I learned about quantum physics...
      required:
        - dataInfo
        - friendsSummary
        - userId
        - conversationId
        - lastConversations
    VectorSearchDto:
      type: object
      properties:
        query:
          type: string
          description: The search query to find relevant documents
          example: What is the capital of France?
          minLength: 3
          maxLength: 1000
        userId:
          type: string
          description: Unique identifier for the user performing the search
          example: user789012
        conversationId:
          type: string
          description: Unique identifier for the conversation
          example: conv123456
      required:
        - query
        - userId
        - conversationId
    MemorySearchDto:
      type: object
      properties:
        query:
          type: string
          description: The search query to find relevant documents
          example: What is the capital of France?
          minLength: 3
          maxLength: 1000
        friendId:
          type: string
          description: Unique identifier for the friend
          example: friend123456
        conversationId:
          type: string
          description: Unique identifier for the conversation
          example: conv123456
      required:
        - query
        - friendId
        - conversationId
